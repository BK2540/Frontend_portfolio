/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.12 public/models/raw.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'

export function Avatar(props) {

  const {animation} = props;
  const group = useRef();
  const { nodes, materials } = useGLTF('/models/raw.glb')

  const { animations: floatingAnimation } = useFBX('/animations/Floating.fbx');
  const { animations: wavingAnimation } = useFBX('/animations/Waving.fbx');
  const { animations: helloAnimation } = useFBX('/animations/Hello.fbx');

  //ANIMATION NAME
  floatingAnimation[0].name = "Floating";
  wavingAnimation[0].name = "Waving";
  helloAnimation[0].name = "Hello";

  const { actions } = useAnimations([floatingAnimation[0], wavingAnimation[0], helloAnimation[0]], group);


  useEffect(() => {
    if (actions[animation]) {
      actions[animation].reset().play();
    }
  }, [animation, actions]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation-x={-(Math.PI / 1.2)} rotation-y={(Math.PI / 4)}>
      <group scale={2.136}>
        <primitive object={nodes.spine} />
        <skinnedMesh geometry={nodes.body.geometry} material={materials.skin} skeleton={nodes.body.skeleton} />
        <skinnedMesh geometry={nodes.hair.geometry} material={materials.hair} skeleton={nodes.hair.skeleton} />
        <skinnedMesh geometry={nodes.Roundcube.geometry} material={materials.face} skeleton={nodes.Roundcube.skeleton} />
        <skinnedMesh geometry={nodes.Cube001.geometry} material={materials.cloth} skeleton={nodes.Cube001.skeleton} />
        <skinnedMesh geometry={nodes.Cube001_1.geometry} material={materials['ear-cloth']} skeleton={nodes.Cube001_1.skeleton} />
        <skinnedMesh geometry={nodes.Sphere_1.geometry} material={materials['eye-white']} skeleton={nodes.Sphere_1.skeleton} />
        <skinnedMesh geometry={nodes.Sphere_2.geometry} material={materials['eye-black']} skeleton={nodes.Sphere_2.skeleton} />
      </group>
    </group>
    </group>
  )
}

useGLTF.preload('/models/raw.glb')
